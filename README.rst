Briefcase macOS App Template
============================

A template for building a Python app that will run under macOS.

**This repository branch contains a template for Python 3.6**.
Other Python versions are available by cloning other branches of repository.

Using this template
-------------------

The easiest way to use this project is to not use it at all - at least,
not directly. `Briefcase <https://github.com/beeware/briefcase/>`__ is a
tool that uses this template, rolling it out using data extracted from
a configuration file.

However, if you *do* want use this template directly...

1. Install `cookiecutter`_. This is a tool used to bootstrap complex project
   templates::
v
    $ pip install cookiecutter

2. Run ``cookiecutter`` on the template::

    $ cookiecutter https://github.com/beeware/briefcase-macOS-app-template --checkout 3.6

3. `Download the Python Apple support package for macOS`_, and extract it into
   the ``Contents/Resources`` folder of the main application bundle. This
   folder shoud have been generated by the cookiecutter template. This will
   give you a ``python`` folder containing a self-contained Python install.

   Alternatively, you can download the `Python-Apple-support`_ project, and
   build your own versions of these frameworks.

4. Add your code to the template. At the very minimum, you need to have an
   ``app/<app name>/__main__.py`` file that defines an entry point that
   will start your application.

   If your code has any dependencies, they should be installed under the
   ``app_packages`` directory.

If you've done this correctly, a project with a formal name of ``My Project``,
with an app name of ```my-project`` should have a directory structure that
looks something like::

    My Project.app/
        Contents/
            MacOS/
                My Project
            Resources/
                app/
                    README
                    my_project/
                        __init__.py
                        __main__.py
                app_packages/
                    README
                    ...
                python/
                    ...
                my-project.icns
                VERSIONS
            Info.plist
        briefcase.toml

The top level directory should identify as an macOS application, and can be
distributed as a standalone package.

Next steps
----------

Of course, running Python code isn't very interesting by itself - you won't
be able to do any console input or output, because a macOS app doesn't display
a console.

To do something interesting, you'll need to work with the native macOS system
libraries to draw widgets and respond to screen taps. The `Rubicon`_
Objective C bridging library can be used to enable an easy interface with the
macOS system libraries. You could also use the `toga`_ library to provides a
cross-platform widget toolkit that supports macOS.

If you have any external library dependencies (like ``toga``, or anything other
third-party library), you should install the library code into the
``app_packages`` directory. This directory is the same as a  ``site_packages``
directory on a normal Python install.

.. _cookiecutter: http://github.com/cookiecutter/cookiecutter
.. _Download the Python Apple support package for macOS: https://briefcase-support.s3-us-west-2.amazonaws.com/python/3.6/macOS/Python-3.6-macOS-support.b8.tar.gz
.. _Python-Apple-support: http://github.com/beeware/Python-Apple-support
.. _toga: http://beeware.org/toga
.. _Rubicon: http://github.com/beeware/rubicon-objc
